=#top AFW Документация

* [#general Общие принципы]
* [#uri Разбор адреса]
* [#controller Контроллеры]
* [#model Модели]
* [#db Работа с базой данных]
* [#cache Кэш]
* [#file Обработка файлов и изображений]
* [#utils Утилиты]
** [#utilDebugLog Вывод отладочной информации]
** [#utilSession Сессии]
** [#utilUtils Дополнительные функции]
** [#utilParser Парсер]
* [#models Базовые модели]
** [#modelSettings Настройки]
** [#modelSupervisor Администратор]
** [#modelUser Пользователь]
** [#modelStatistics Статистика]
** [#modelMap Карта]
** [#modelBasket Корзина]
* [#controllers Базовые контроллеры]
** [#controllerLayout Макет]
** [#controllerSimpleList Простой список]
** [#controllerPaginator Страницы]
** [#controllerForm Форма]


==#intro Введение

Этот документ - документация к веб-фреймворку AFW(AFW FrameWork). Данный фреймворк предназначен как для начинающих веб-разработчиков, которые хотят научиться создавать свои проекты с нуля, так и для опытных, желающих полностью контролировать процесс загрузки страниц и работу проекта вцелом, не допуская никаких лишних действий со стороны фреймворка.

В данный момент документация весьма краткая, со временем будет дополняться.

[https://github.com/Aequiternus/afw Исходный код] [http://inmemo.net/project/afw Ошибки и предложения]



==#general Общие принципы

Структура папок строго соответствует [http://www.php.net/manual/ru/language.namespaces.rationale.php пространствам имен], которые фреймворк активно использует. В конфигурации каждого приложения должна быть определена функция автоматической загрузки классов. Расположение файлов классов зависит от конкретного проекта и определяется этой функцией. По умолчанию корневая папка классов и корневое пространство имен совпадает с корневой папкой приложения.

'''
function __autoload($class)
{
    require str_replace('\\', '/', $class) . '.php';
}
'''

Это позволяет забыть о том какие файлы необходимо подключить с помощью `include` или `require`, и в то же время при работе приложения всегда будут подключены только необходимые файлы.

Все файлы фреймворка расположены в папке и пространстве имен `afw`.

Фреймворк основан на распространенном и удобном для разработки веб-приложений шаблоне программирования MVC(Model-View-Controller, Модель-Представление-Контроллер). В связи с этим в фреймворке существует два основных пространства имен: `m` для моделей и `c` для контроллеров, а также папка `v` для представлений (шаблонов).

Ресурсные файлы - те файлы которые используются на html-страницах: css, js, изображения и др. Располагаются эти файлы в папке `res`. Документация в папке `doc`, файлы локализации в папке `locale`.

Классы, написанные сторонними разработчиками, расположены в папке `ext`.



==#uri Разбор адреса

Для разбора адреса предусмотрен специальный контроллер `afw\c\Uri`. С помощью метода `addPattern` можно задать регулярное выражение и соответствующую ему функцию-обработчик, аргументом каторой являются [http://www.php.net/manual/ru/function.preg-match-all.php результаты поиска] регулярного выражения. Обработчик должен вернуть контроллер, описание работы которых будет ниже.

После установки всех необходимых адресов можно получить соответствующий текущему адресу контроллер с помощью метода `getController`, или сразу запустить отрисовку с помощью этого контроллера `renderController`.

'''
$uri = afw\c\Uri::instance();

$uri->addPattern(
    '`^blog/post-(\d+)$`', # рег. выр. адреса записи в блоге, например /blog/post-123
    function ($matches)
    {
        $postId = $matches[1];              # получение номера записи в блоге
        $controller = new c\Post($postId);  # создание контроллера записи в блоге
        return $controller;
    }
);

$uri->renderController();
'''

Обратите внимание, что контроллер `afw\c\Uri` автоматически убирает начальные и конечные слэши из адреса перед проверкой. Для получения преобразованного адреса используйте `afw\c\Uri::current()`.

Контроллер `afw\c\Uri` позволяет установить обработчик исключений, который будет вызван если ни один шаблон адреса не подошел, обработчик вернул не класс контроллера или в случае возникновения любого другого исключения. Аргументом обработчика в данном случае является исключение. Для отображения информации об исключении предусмотрен базовый контроллер `afw\c\Exception`.

'''
$uri->setException(function($exception)
{
    return new afw\c\Exception($exception));
});
'''



==#controller Контроллеры



==#model Модели
